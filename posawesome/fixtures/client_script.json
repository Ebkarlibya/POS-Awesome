[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-12-08 11:10:39.261139",
  "module": "POSAwesome",
  "name": "Customer Script",
  "script": "frappe.ui.form.on('Customer', {\n    validate(frm) {\n        let item_group_counts = {};\n        let duplicate_item_groups = {};\n\n        if (frm.doc.custom_percent_table && frm.doc.custom_percent_table.length > 0) {\n            frm.doc.custom_percent_table.forEach((row, index) => {\n                if (item_group_counts[row.item_group]) {\n                    duplicate_item_groups[row.item_group] = \n                        (duplicate_item_groups[row.item_group] || [item_group_counts[row.item_group]]).concat(index + 1);\n                } else {\n                    item_group_counts[row.item_group] = index + 1;\n                }\n            });\n\n            if (Object.keys(duplicate_item_groups).length > 0) {\n                let message = Object.entries(duplicate_item_groups)\n                    .map(([group, lines]) => `Item Group <b>${group}</b> is duplicated in lines: ${lines.join(\", \")}`)\n                    .join(\"<br>\");\n                frappe.msgprint(message);\n                frappe.validated = false;\n            }\n        }\n    },\n    custom_update_related_customers_percentage(frm) {\n        frappe.confirm(\n            `This will update all related customers belonging to the current customer <b>${frm.doc.name}</b> with the new percent values for employee and company. Do you want to proceed?`,\n            function() {\n                // User approved the action\n                \n                frappe.call({\n                    method: \"posawesome.api_utils.update_related_customer_percentages\",\n                    args: {\n                        parent_customer: frm.doc.name\n                    },\n                    callback: function(response) {\n                        if (response.message) {\n                            let messages = [];\n                            for (const [item_group, count] of Object.entries(response.message)) {\n                                messages.push(`${count} related customers updated successfully for item group ${item_group}.`);\n                            }\n\n                            // Join messages and display\n                            frappe.msgprint(messages.join(\"<br>\"));\n                        } else {\n                            frappe.msgprint(\"No related customers were updated.\");\n                        }\n                    }\n                });\n\n            },\n            function() {\n                // User canceled\n                frappe.msgprint('Update canceled.');\n            }\n        );\n    }\n\n\n});\n\n\nfrappe.ui.form.on('Percent Table', {\n    employee_percentage(frm, cdt, cdn) {\n        var doc = locals[cdt][cdn];\n        if(doc.employee_percentage){\n            frappe.model.set_value(cdt, cdn, \"company_percentage\", 100-doc.employee_percentage);\n        }\n    },\n    company_percentage(frm, cdt, cdn) {\n        var doc = locals[cdt][cdn];\n        if(doc.company_percentage){\n            frappe.model.set_value(cdt, cdn, \"employee_percentage\", 100-doc.company_percentage);\n        }\n    }\n})\n\n\n\n\nfrappe.ui.form.on('Customer Plan', {\n    is_default: function(frm, cdt, cdn) {\n        let child = locals[cdt][cdn];\n\n        if (child.is_default) {\n            // Uncheck all other rows in the child table\n            frm.doc.custom_plan.forEach(row => {\n                if (row.name !== child.name) {\n                    row.is_default = 0;\n                }\n            });\n        }\n\n        // Refresh the table to reflect the changes\n        frm.refresh_field('custom_plan');\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-12-22 11:19:01.172737",
  "module": "POSAwesome",
  "name": "Sales Invoice Script",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh(frm) {\n        frm.set_query(\"custom_related_customer\", function() {\n            return {\n                filters: [\n                    [\"Related Customer\",\"parent_customer\", \"=\", frm.doc.customer]\n                ]\n            }\n        });\n    },\n    customer(frm) {\n        frm.set_query(\"custom_related_customer\", function() {\n            return {\n                filters: [\n                    [\"Related Customer\",\"parent_customer\", \"=\", frm.doc.customer]\n                ]\n            }\n        });\n    }\n})\n\nfrappe.ui.form.on(\"Sales Invoice Item\",{\n    rate:function(frm, cdt, cdn) {\n        var row = locals[cdt][cdn];\n        frappe.model.get_value('Customer', {'name': frm.doc.customer}, 'custom_item_enterprise_percent',\n          function(d) {\n            frappe.model.set_value(cdt, cdn, \"custom_item_enterprise_rate\", row.rate+(row.rate*(d.custom_item_enterprise_percent/100)));\n            frappe.model.set_value(cdt, cdn, \"custom_item_enterprise_amount\", row.qty*row.custom_item_enterprise_rate);\n          })\n    },\n    qty:function(frm, cdt, cdn) {\n        var row = locals[cdt][cdn];\n        frappe.model.get_value('Customer', {'name': frm.doc.customer}, 'custom_item_enterprise_percent',\n          function(d) {\n            frappe.model.set_value(cdt, cdn, \"custom_item_enterprise_rate\", row.rate+(row.rate*(d.custom_item_enterprise_percent/100)));\n            frappe.model.set_value(cdt, cdn, \"custom_item_enterprise_amount\", row.qty*row.custom_item_enterprise_rate);\n          })\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-12-18 13:29:15.888220",
  "module": "POSAwesome",
  "name": "Purchase Receipt Script",
  "script": "frappe.ui.form.on('Purchase Receipt Item', {\n    item_code: function (frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        frappe.run_serially([\n            () => frappe.timeout(0.1),\n            () => {\n                if (row.item_code && row.warehouse) {\n                    update_available_qty(frm, cdt, cdn);\n                }\n            }\n        ]);\n    },\n    warehouse: function (frm, cdt, cdn) {\n        update_available_qty(frm, cdt, cdn);\n    }\n});\n\nfunction update_available_qty(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    if (row.item_code && row.warehouse) {\n        frappe.call({\n            method: \"posawesome.api_utils.get_item_available_qty\",\n            args: {\n                item_code: row.item_code,\n                warehouse: row.warehouse\n            },\n            callback: function (r) {\n                if (r.message !== undefined) {\n                    frappe.model.set_value(cdt, cdn, \"custom_available_qty_at_warehouse\", r.message);\n                }\n            }\n        });\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-01-07 13:37:54.192607",
  "module": "POSAwesome",
  "name": "Sales Order Script",
  "script": "// Client Script for Sales Order\nfrappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        // pass\n    }\n});\n\n\n\n\nfrappe.ui.form.on('Sales Order Item', {\n    item_code: function(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n\n        if (row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_margin_percentage', 0);\n\n            console.log(`Fetching data for Item Code: ${row.item_code}`);\n\n            get_item_valuation_rate(frm, cdt, cdn, row)\n\n        } else {\n            console.log('Item Code is empty.');\n        }\n    },\n    conversion_factor: function(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n\n        if (row.item_code && row.uom) {\n            console.log(`Fetching data for Item Code: ${row.item_code}`);\n\n            frappe.run_serially([\n                () => frappe.timeout(0.5),\n                () => {\n                    if (row.item_code) {\n                        get_last_buying_price_lyd(frm, cdt, cdn, row)\n                        get_last_buying_price_usd(frm, cdt, cdn, row)\n                    }\n                }\n            ]);\n            \n        } else {\n            console.log('Item Code is empty.');\n        }\n    },\n    custom_margin_percentage: function(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n        if(row.custom_margin_percentage>100 || row.custom_margin_percentage<0){\n            frappe.model.set_value(cdt, cdn, 'custom_margin_percentage', 0);\n\n            frappe.throw(\"Margin Percentage must be betwee 0 and 100\")\n            return\n        }\n        get_item_valuation_rate(frm, cdt, cdn, row)\n    },\n});\n\n\nfunction get_item_valuation_rate(frm, cdt, cdn, row) {\n    // Fetch the inventory valuation rate\n    frappe.run_serially([\n        () => frappe.timeout(0.5),\n        () => {\n            if (row.item_code) {\n                get_last_buying_price_lyd(frm, cdt, cdn, row)\n                get_last_buying_price_usd(frm, cdt, cdn, row)\n            }\n            if (row.item_code && row.warehouse) {\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Bin',\n                        filters: { item_code: row.item_code, warehouse: row.warehouse },\n                        fieldname: ['valuation_rate'],\n                        order_by: 'creation desc',\n                        limit_page_length: 1\n                    },\n                    callback: function(response) {\n                        if (response.message && response.message.valuation_rate != null) {\n                            var item_valuation_rate = response.message.valuation_rate || 0\n                            var margin_rate_value = 0\n                            \n                            if(frm.doc.currency=='LYD'){\n                                margin_rate_value = row.custom_last_buying_price + (row.custom_last_buying_price * (row.custom_margin_percentage/100))\n                            }else if(frm.doc.currency=='USD'){\n                                margin_rate_value = row.custom_last_buying_price_usd + (row.custom_last_buying_price_usd * (row.custom_margin_percentage/100))\n                            }\n                            if(margin_rate_value>0){\n                                frappe.model.set_value(cdt, cdn, 'rate', margin_rate_value);\n                            }\n\n                            frappe.model.set_value(cdt, cdn, 'custom_item_valuation_rate', item_valuation_rate);\n\n                            console.log(`Valuation Rate: ${response.message.valuation_rate}`);\n                        } else {\n                            console.log('No Valuation Rate found in Bin. Fetching from Item doctype...');\n                            // Fetch valuation rate from Item doctype\n                            frappe.call({\n                                method: 'frappe.client.get_value',\n                                args: {\n                                    doctype: 'Item',\n                                    filters: { item_code: row.item_code },\n                                    fieldname: ['valuation_rate']\n                                },\n                                callback: function(itemResponse) {\n                                    if (itemResponse.message && itemResponse.message.valuation_rate != null) {\n                                        var item_valuation_rate = itemResponse.message.valuation_rate || 0\n                                        var margin_rate_value = 0\n                            \n                                        if(frm.doc.currency=='LYD'){\n                                            margin_rate_value = row.custom_last_buying_price + (row.custom_last_buying_price * (row.custom_margin_percentage/100))\n                                        }else if(frm.doc.currency=='USD'){\n                                            margin_rate_value = row.custom_last_buying_price_usd + (row.custom_last_buying_price_usd * (row.custom_margin_percentage/100))\n                                        }\n                                        if(margin_rate_value>0){\n                                            frappe.model.set_value(cdt, cdn, 'rate', margin_rate_value);\n                                        }\n                                        \n                                        frappe.model.set_value(cdt, cdn, 'custom_item_valuation_rate', item_valuation_rate);\n\n                                        console.log(`Valuation Rate from Item: ${itemResponse.message.valuation_rate}`);\n                                    } else {\n                                        frappe.model.set_value(cdt, cdn, 'custom_item_valuation_rate', 0);\n                                        console.log('No Valuation Rate found in Item. Defaulting to 0.');\n                                    }\n                                },\n                                error: function(error) {\n                                    console.error('Error fetching valuation rate from Item:', error);\n                                }\n                            });\n                        }\n                    },\n                    error: function(error) {\n                        console.error('Error fetching valuation rate:', error);\n                    }\n                });\n            }\n        }\n    ]);\n}\n\n\nfunction get_last_buying_price_lyd(frm, cdt, cdn, row) {\n    // Fetch the last buying price (lyd)\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Item Price',\n            fields: ['price_list_rate'],\n            filters: {\n                item_code: row.item_code,\n                currency: 'LYD',\n                buying: 1\n            },\n            order_by: 'modified desc',\n            limit_page_length: 1\n        },\n        callback: function(response) {\n            if (response.message && response.message.length > 0) {\n                // Get the price_list_rate from the first result\n                const last_buying_price = response.message[0].price_list_rate * row.conversion_factor || 0;\n                frappe.model.set_value(cdt, cdn, 'custom_last_buying_price', last_buying_price);\n                console.log(`Last Buying Price (LYD): ${last_buying_price}`);\n            } else {\n                frappe.model.set_value(cdt, cdn, 'custom_last_buying_price', 0);\n                console.log('No Last Buying Price (LYD) found. Defaulting to 0.');\n            }\n        },\n        error: function(error) {\n            console.error('Error fetching last buying price (LYD):', error);\n        }\n    });\n}\n\nfunction get_last_buying_price_usd(frm, cdt, cdn, row) {\n    // Fetch the last buying price (usd)\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Item Price',\n            fields: ['price_list_rate'],\n            filters: {\n                item_code: row.item_code,\n                currency: 'USD',\n                buying: 1\n            },\n            order_by: 'modified desc',\n            limit_page_length: 1\n        },\n        callback: function(response) {\n            if (response.message && response.message.length > 0) {\n                // Get the price_list_rate from the first result\n                const last_buying_price = response.message[0].price_list_rate * row.conversion_factor || 0;\n                frappe.model.set_value(cdt, cdn, 'custom_last_buying_price_usd', last_buying_price);\n                console.log(`Last Buying Price (USD): ${last_buying_price}`);\n            } else {\n                frappe.model.set_value(cdt, cdn, 'custom_last_buying_price_usd', 0);\n                console.log('No Last Buying Price (USD) found. Defaulting to 0.');\n            }\n        },\n        error: function(error) {\n            console.error('Error fetching last buying price (USD):', error);\n        }\n    });\n}\n\n\n// Ensure custom fields \"custom_last_buying_price\" and \"custom_item_valuation_rate\" are correctly added to the Sales Order Item child table.\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2025-01-07 13:53:55.357528",
  "module": "POSAwesome",
  "name": "Quotation Script",
  "script": "// Client Script for Quotation\nfrappe.ui.form.on('Quotation', {\n    refresh: function(frm) {\n        // pass\n    }\n});\n\n\n\n\nfrappe.ui.form.on('Quotation Item', {\n    item_code: function(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n\n        if (row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_margin_percentage', 0);\n\n            console.log(`Fetching data for Item Code: ${row.item_code}`);\n\n            get_item_valuation_rate(frm, cdt, cdn, row)\n\n        } else {\n            console.log('Item Code is empty.');\n        }\n    },\n    conversion_factor: function(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n\n        if (row.item_code && row.uom) {\n            console.log(`Fetching data for Item Code: ${row.item_code}`);\n\n            frappe.run_serially([\n                () => frappe.timeout(0.5),\n                () => {\n                    if (row.item_code) {\n                        get_last_buying_price_lyd(frm, cdt, cdn, row)\n                        get_last_buying_price_usd(frm, cdt, cdn, row)\n                    }\n                }\n            ]);\n            \n        } else {\n            console.log('Item Code is empty.');\n        }\n    },\n    custom_margin_percentage: function(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n        if(row.custom_margin_percentage>100 || row.custom_margin_percentage<0){\n            frappe.model.set_value(cdt, cdn, 'custom_margin_percentage', 0);\n\n            frappe.throw(\"Margin Percentage must be betwee 0 and 100\")\n            return\n        }\n        get_item_valuation_rate(frm, cdt, cdn, row)\n    },\n});\n\n\nfunction get_item_valuation_rate(frm, cdt, cdn, row) {\n    // Fetch the inventory valuation rate\n    frappe.run_serially([\n        () => frappe.timeout(0.5),\n        () => {\n            if (row.item_code) {\n                get_last_buying_price_lyd(frm, cdt, cdn, row)\n                get_last_buying_price_usd(frm, cdt, cdn, row)\n            }\n            if (row.item_code && row.warehouse) {\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Bin',\n                        filters: { item_code: row.item_code, warehouse: row.warehouse },\n                        fieldname: ['valuation_rate'],\n                        order_by: 'creation desc',\n                        limit_page_length: 1\n                    },\n                    callback: function(response) {\n                        if (response.message && response.message.valuation_rate != null) {\n                            var item_valuation_rate = response.message.valuation_rate || 0\n                            var margin_rate_value = 0\n                            \n                            if(frm.doc.currency=='LYD'){\n                                margin_rate_value = row.custom_last_buying_price + (row.custom_last_buying_price * (row.custom_margin_percentage/100))\n                            }else if(frm.doc.currency=='USD'){\n                                margin_rate_value = row.custom_last_buying_price_usd + (row.custom_last_buying_price_usd * (row.custom_margin_percentage/100))\n                            }\n                            if(margin_rate_value>0){\n                                frappe.model.set_value(cdt, cdn, 'rate', margin_rate_value);\n                            }\n\n                            frappe.model.set_value(cdt, cdn, 'custom_item_valuation_rate', item_valuation_rate);\n\n                            console.log(`Valuation Rate: ${response.message.valuation_rate}`);\n                        } else {\n                            console.log('No Valuation Rate found in Bin. Fetching from Item doctype...');\n                            // Fetch valuation rate from Item doctype\n                            frappe.call({\n                                method: 'frappe.client.get_value',\n                                args: {\n                                    doctype: 'Item',\n                                    filters: { item_code: row.item_code },\n                                    fieldname: ['valuation_rate']\n                                },\n                                callback: function(itemResponse) {\n                                    if (itemResponse.message && itemResponse.message.valuation_rate != null) {\n                                        var item_valuation_rate = itemResponse.message.valuation_rate || 0\n                                        var margin_rate_value = 0\n                            \n                                        if(frm.doc.currency=='LYD'){\n                                            margin_rate_value = row.custom_last_buying_price + (row.custom_last_buying_price * (row.custom_margin_percentage/100))\n                                        }else if(frm.doc.currency=='USD'){\n                                            margin_rate_value = row.custom_last_buying_price_usd + (row.custom_last_buying_price_usd * (row.custom_margin_percentage/100))\n                                        }\n                                        if(margin_rate_value>0){\n                                            frappe.model.set_value(cdt, cdn, 'rate', margin_rate_value);\n                                        }\n                                        \n                                        frappe.model.set_value(cdt, cdn, 'custom_item_valuation_rate', item_valuation_rate);\n\n                                        console.log(`Valuation Rate from Item: ${itemResponse.message.valuation_rate}`);\n                                    } else {\n                                        frappe.model.set_value(cdt, cdn, 'custom_item_valuation_rate', 0);\n                                        console.log('No Valuation Rate found in Item. Defaulting to 0.');\n                                    }\n                                },\n                                error: function(error) {\n                                    console.error('Error fetching valuation rate from Item:', error);\n                                }\n                            });\n                        }\n                    },\n                    error: function(error) {\n                        console.error('Error fetching valuation rate:', error);\n                    }\n                });\n            }\n        }\n    ]);\n}\n\n\nfunction get_last_buying_price_lyd(frm, cdt, cdn, row) {\n    // Fetch the last buying price (lyd)\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Item Price',\n            fields: ['price_list_rate'],\n            filters: {\n                item_code: row.item_code,\n                currency: 'LYD',\n                buying: 1\n            },\n            order_by: 'modified desc',\n            limit_page_length: 1\n        },\n        callback: function(response) {\n            if (response.message && response.message.length > 0) {\n                // Get the price_list_rate from the first result\n                const last_buying_price = response.message[0].price_list_rate * row.conversion_factor || 0;\n                frappe.model.set_value(cdt, cdn, 'custom_last_buying_price', last_buying_price);\n                console.log(`Last Buying Price (LYD): ${last_buying_price}`);\n            } else {\n                frappe.model.set_value(cdt, cdn, 'custom_last_buying_price', 0);\n                console.log('No Last Buying Price (LYD) found. Defaulting to 0.');\n            }\n        },\n        error: function(error) {\n            console.error('Error fetching last buying price (LYD):', error);\n        }\n    });\n}\n\nfunction get_last_buying_price_usd(frm, cdt, cdn, row) {\n    // Fetch the last buying price (usd)\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Item Price',\n            fields: ['price_list_rate'],\n            filters: {\n                item_code: row.item_code,\n                currency: 'USD',\n                buying: 1\n            },\n            order_by: 'modified desc',\n            limit_page_length: 1\n        },\n        callback: function(response) {\n            if (response.message && response.message.length > 0) {\n                // Get the price_list_rate from the first result\n                const last_buying_price = response.message[0].price_list_rate * row.conversion_factor || 0;\n                frappe.model.set_value(cdt, cdn, 'custom_last_buying_price_usd', last_buying_price);\n                console.log(`Last Buying Price (USD): ${last_buying_price}`);\n            } else {\n                frappe.model.set_value(cdt, cdn, 'custom_last_buying_price_usd', 0);\n                console.log('No Last Buying Price (USD) found. Defaulting to 0.');\n            }\n        },\n        error: function(error) {\n            console.error('Error fetching last buying price (USD):', error);\n        }\n    });\n}\n\n\n// Ensure custom fields \"custom_last_buying_price\" and \"custom_item_valuation_rate\" are correctly added to the Quotation Item child table.\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-01-07 15:44:03.389462",
  "module": "POSAwesome",
  "name": "Delivery Note Script",
  "script": "frappe.ui.form.on('Delivery Note', {\n    refresh: function(frm) {\n        // Add the \"Sales Order\" option\n        frm.add_custom_button(__('Sales Order'), function() {\n            if (!frm.doc.customer) {\n                frappe.throw({\n                    title: __(\"Mandatory\"),\n                    message: __(\"Please Select a Customer\")\n                });\n            }\n            erpnext.utils.map_current_doc({\n                method: \"erpnext.selling.doctype.sales_order.sales_order.make_delivery_note\",\n                source_doctype: \"Sales Order\",\n                target: frm,\n                setters: {\n                    customer: frm.doc.customer,\n                },\n                get_query_filters: {\n                    docstatus: 1,\n                    status: [\"not in\", [\"Closed\", \"On Hold\"]],\n                    per_delivered: [\"<\", 99.99],\n                    company: frm.doc.company,\n                    project: frm.doc.project || undefined,\n                }\n            });\n        }, __(\"Get Items From\"));\n\n        // Add the \"Sales Invoice\" option\n        frm.add_custom_button(__('Sales Invoice'), function() {\n            if (!frm.doc.customer) {\n                frappe.throw({\n                    title: __(\"Mandatory\"),\n                    message: __(\"Please Select a Customer\")\n                });\n            }\n            erpnext.utils.map_current_doc({\n                method: \"erpnext.accounts.doctype.sales_invoice.sales_invoice.make_delivery_note\",\n                source_doctype: \"Sales Invoice\",\n                target: frm,\n                setters: {\n                    customer: frm.doc.customer,\n                },\n                get_query_filters: {\n                    docstatus: 1,\n                    is_return: 0,\n                    company: frm.doc.company,\n                    project: frm.doc.project || undefined,\n                }\n            });\n        }, __(\"Get Items From\"));\n\n        // Add the \"Purchase Invoice\" option\n        frm.add_custom_button(__('Purchase Invoice'), function() {\n            if (!frm.doc.customer) {\n                frappe.throw({\n                    title: __(\"Mandatory\"),\n                    message: __(\"Please Select a Customer\")\n                });\n            }\n            erpnext.utils.map_current_doc({\n                method: \"posawesome.api_utils.make_delivery_note_purchase_invoice\",\n                source_doctype: \"Purchase Invoice\",\n                target: frm,\n                setters: {},\n                get_query_filters: {\n                    docstatus: 1,\n                    is_return: 0,\n                    company: frm.doc.company,\n                }\n            });\n        }, __(\"Get Items From\"));\n\n        // Add the \"Purchase Receipt\" option\n        frm.add_custom_button(__('Purchase Receipt'), function() {\n            if (!frm.doc.customer) {\n                frappe.throw({\n                    title: __(\"Mandatory\"),\n                    message: __(\"Please Select a Customer\")\n                });\n            }\n            erpnext.utils.map_current_doc({\n                method: \"posawesome.api_utils.make_delivery_note_purchase_receipt\",\n                source_doctype: \"Purchase Receipt\",\n                target: frm,\n                setters: {},\n                get_query_filters: {\n                    docstatus: 1,\n                    company: frm.doc.company,\n                }\n            });\n        }, __(\"Get Items From\"));\n    }\n});\n",
  "view": "Form"
 }
]